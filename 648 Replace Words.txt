//648. Replace Words

//Time Complexity: O(nk + lk) // where n and l are lengths of array and sentence respectively and k is length of the string
//Space Complexity: O(nk + lk) // where n and l are lengths of array and sentence respectively and k is length of the string

class Solution {
    class TrieNode{
        TrieNode[] children;
        boolean isEnd;
        public TrieNode(){
            this.children=new TrieNode[26];
        }
    }
    private TrieNode root;
    private void insert(String word){
        TrieNode curr=root;
        for(int i=0;i<word.length();i++){
            char c=word.charAt(i);
            if(curr.children[c-'a']==null){
                curr.children[c-'a']=new TrieNode();
            }
            curr=curr.children[c-'a'];
        }
    curr.isEnd=true;
    }

    public String replaceWords(List<String> dictionary, String sentence) {
        this.root=new TrieNode();
        for(String word:dictionary){
            insert(word);
        }
        String []strArr=sentence.split(" ");
        StringBuilder result=new StringBuilder();
        TrieNode curr=root;
        for(int k=0;k<strArr.length;k++){
            String word=strArr[k];
            if(k>0){
                result.append(" ");
            }
            StringBuilder replacement=new StringBuilder();
             curr=root;
            for(int i=0;i<word.length();i++){
                char c=word.charAt(i);
                if(curr.isEnd || curr.children[c-'a']==null){
                    break;
                }
                curr=curr.children[c-'a'];
                replacement.append(c);
            }
            if(!curr.isEnd){
                result.append(word);
            }else{
                result.append(replacement.toString());
            }
        }
        return result.toString();
    }
}








