class Solution {
    class TrieNode{
        TrieNode[] children;
        boolean isEnd;
        public TrieNode(){
            children = new TrieNode[26];
            isEnd = false;
        }
    }
    
    TrieNode root;
    private void insert(String word){
        TrieNode curr = root;
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            if(curr.children[c-'a']==null){
                curr.children[c-'a'] = new TrieNode();
            }
            curr = curr.children[c-'a'];
        }
        curr.isEnd = true;
    }
    public String replaceWords(List<String> dictionary, String sentence) {
        if(dictionary == null || dictionary.size() ==0) return sentence;
        root = new TrieNode();
        for(String word : dictionary){
            insert(word);
        }
        String[] splitArray = sentence.split(" ");
        StringBuilder result = new StringBuilder();
        for(int i = 0;i<splitArray.length;i++){
            if(i !=0){
                result.append(" ");
            }
            StringBuilder replacement = new StringBuilder();
            TrieNode curr = root;
            String word = splitArray[i];
            for(int j = 0;j<word.length();j++){
                char c = word.charAt(j);
                if(curr.children[c - 'a'] ==null || curr.isEnd) break;
                replacement.append(c);
                curr = curr.children[c-'a'];
            }
            if(curr.isEnd){
                result.append(replacement.toString());
            }
            else{
                result.append(word);
            }
        }
        return result.toString();
    }
}