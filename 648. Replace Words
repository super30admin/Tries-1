Time complexity: O(m*n) m = no. of words, n = no. of operations performed for mth word
Space complexity: O(m*n) m = no. of words, n = no. of operations performed for mth word
Did this code successfully submitted on leetcode: Yes


class Solution {
    
    class TrieNode{
        boolean isWord;
        TrieNode[] children;
        String str;
        
        public TrieNode(){
            str = "";
            isWord = false;
            children = new TrieNode[26];
        }
    }
    
    TrieNode root;
    
    public String replaceWords(List<String> dict, String sentence) {
        
        root = new TrieNode();
        
        //Create the trie
        insert_Trie(dict);
        
        //give the new updated string
        String[] split_sentence = sentence.split(" ");
        
        String ret_val = "";
        
        for(String s : split_sentence){
            //Call a function to check for the updated words
            ret_val += new_str(s)+ " ";
        }
        
        return ret_val.substring(0,ret_val.length()-1);
    }
    
    public String new_str(String word){
        
        TrieNode node = root;
        for(int i=0; i<word.length();i++){
            
            char ch = word.charAt(i);
            
            if(node.isWord == true)
                return node.str;
            
            if(node.children[ch-'a']==null)
                break;
            else
                node = node.children[ch-'a'];
        }
        return word;
    }
    
    public void insert_Trie(List<String> words){
        for(String word : words){
            TrieNode node = root;
            
            for(int i = 0; i<word.length();i++){
                char ch = word.charAt(i);
                
                if(node.children[ch-'a']==null){
                    node.children[ch-'a'] = new TrieNode();
                }
                
                node = node.children[ch-'a'];
            }
            
            node.isWord = true;
            node.str = word;
        }
    }
}
