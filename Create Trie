/**
* Time complexity= O(L) L is length of word
* Space complexity =O(L) L is length of word
*/

class Trie {
    
    class TrieNode{
        boolean isEnd;
        TrieNode[] children;
        public TrieNode(){
            children=new TrieNode[26];
        }
    }

    TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
       root=new TrieNode(); 
        
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode current=root;
        for(int i = 0; i < word.length();i++){
            char c=word.charAt(i);
            if(current.children[c-'a']==null){
                current.children[c-'a']=new TrieNode();
            }
            current=current.children[c-'a'];
        }
        current.isEnd=true;
        
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode current=root;
        for(int i=0;i<word.length();i++){
            char c=word.charAt(i);
            if(current.children[c-'a']==null) return false;
            current=current.children[c-'a'];
        }
        return current.isEnd;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode current=root;
        for(int i=0;i<prefix.length();i++){
            char c=prefix.charAt(i);
            if(current.children[c-'a']==null) return false;
            current=current.children[c-'a'];
        }
        return true;
    }
}

