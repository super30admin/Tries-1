# TC - O(len(input)) for each operation
# SC - O(max(len_words))
# Ran on LC - Yes

# At each level, create a character array of TrieNodes (each TrieNode has 26 size array)

class Trie:
    
    class Node:
        def __init__(self, isEnd=False):
            self.isEnd = isEnd
            self.children = [None for _ in range(26)]

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.trie = self.Node()

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        trie = self.trie
        for i in range(len(word)):
            if trie.children[ord(word[i])-97] is None:
                trie.children[ord(word[i])-97] = self.Node() 
            trie = trie.children[ord(word[i])-97]
        trie.isEnd = True
        return

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        trie = self.trie
        for i in range(len(word)):
            if trie.children[ord(word[i])-97] is None:
                return False
            trie = trie.children[ord(word[i])-97]
        return trie.isEnd

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        trie = self.trie
        for i in range(len(prefix)):
            if trie.children[ord(prefix[i])-97] is None:
                return False
            trie = trie.children[ord(prefix[i])-97]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)