// Time Complexity o(n) Space complexity o(n)
class Solution {
    String ans="";
    class TrieNode{
        TrieNode[] children;
        String str;
        public TrieNode(){
          children = new TrieNode[26];
            
        }

        public void insert(TrieNode root, String word){
            TrieNode curr = root;
            for(int i=0;i<word.length();i++){
                char c = word.charAt(i);
                if(curr.children[c-'a']==null){
                    curr.children[c-'a'] = new TrieNode();
                }
                curr=curr.children[c-'a'];
            }
            curr.str=word;
        }
    }
    public String longestWord(String[] words) {
       TrieNode root = new TrieNode();
       for(String word : words){
           root.insert(root,word);
       }
       dfs(root);
       return ans;
    }
    public void dfs(TrieNode root){
        if(root==null) return;
        for(TrieNode child : root.children){
            if(child!=null && child.str!=null){
                if(ans.length()<child.str.length()){
                    ans=child.str;
                }
                dfs(child);
            }
        }

    }
}