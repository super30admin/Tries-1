// Time Complexity : O(N*K*n), N is length of dictionary, n is length of given string, K is maximum length of words in given dictionary
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :No


// Approach
//1) sort the array to get all the words that form the present word should be before it in the array.
//2) While inserting check if all the characters of the word are present except the last character by using newCount variable.
//3) Also check the case where the newcount = 1 the previous word should also be formed with adding only one character by using isValid field.
class Solution {
     class TrieNode {
         char c;
         TrieNode[] arr;
         boolean isWord;
         boolean isValid;
         TrieNode(char c){
             this.c = c;
             arr = new TrieNode[26];
             isWord = false;
             isValid = false;
         }
     }
    
    public String longestWord(String[] words) {
        Arrays.sort(words); String retWord = "";
        TrieNode root = new TrieNode('-'); root.isValid = true;
        for(String word:words){
            if(insert(root,word)){
                if(word.length()>retWord.length()){
                    retWord = word;
                }
            }
        }
        return retWord;
    }
    
    public boolean insert(TrieNode root,String word) {
         TrieNode temp = root; TrieNode prev = root; int newCount = 0;
         for(int i=0;i<word.length();i++){
             if(temp.arr[word.charAt(i)-'a']!=null){
                 prev = temp;
                 temp = temp.arr[word.charAt(i)-'a'];
             }
             else{
                 newCount++;
                 prev = temp;
                 temp.arr[word.charAt(i)-'a'] = new TrieNode(word.charAt(i));
                 temp = temp.arr[word.charAt(i)-'a'];
             }
         }
         temp.isWord = true;
         if(newCount==1){
             if(prev.isValid){
                 temp.isValid = true;
                 return true;
             }
             return false;
         }
         return false;
     }
}