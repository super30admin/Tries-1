//TimeComplexity.  O(nk)
//SpaceComplexity. O(nk)


class Solution {

     class TrieNode {
            boolean end;
            String word;
            TrieNode[] children;

            public TrieNode(){
                this.children = new TrieNode[26];
                word = "";
            }
        }

        TrieNode root;
        public void insert(String word){
            TrieNode curr = root;

            for(int i = 0; i < word.length(); i++){
                char c = word.charAt(i);

                if(curr.children[c - 'a'] == null){

                    curr.children[c - 'a'] = new TrieNode();
                }

                curr = curr.children[c - 'a'];
                
            }
            curr.end = true;
            curr.word = word;
        }
    

    public String longestWord(String[] words) {
         root = new TrieNode();
        for(int i = 0 ; i < words.length; i++){
            insert(words[i]);
        }
       
        Queue<TrieNode> q = new LinkedList<>();
        q.add(root);
        TrieNode curr = root;
        while(!q.isEmpty()){
            curr = q.poll();
            
        for(int i= 25; i >= 0 ; i--){
           if(curr.children[i] != null && curr.children[i].end){
               q.add(curr.children[i]);
           }
        }
        }

        return curr.word;
        
        
       
    }

    
}
