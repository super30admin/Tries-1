class Solution {
    
    class TrieNode{
        TrieNode[] children;
        String word;
        
        public TrieNode(){
            children = new TrieNode[26];
            word ="";
        }
    }
    
    private TrieNode root;
    private String output="";
    
    private void insert(String[] words){
        for(String word : words){
            TrieNode curr = root;
            for(char ch : word.toCharArray()){
                if(curr.children[ch-'a'] == null){
                    curr.children[ch-'a'] = new TrieNode();
                }
                curr = curr.children[ch-'a'];
            }
            curr.word = word;
        }
    }
    
    private String dfs(TrieNode node){
        if(node.word.length() > output.length()){
            output = node.word;
        }
        for(int i=0;i<26;i++){
            if(node.children[i]!=null && node.children[i].word!=""){
                dfs(node.children[i]);
            }
        }
        return output;
    }
    
    public String longestWord(String[] words) {
        root = new TrieNode();
        
        insert(words);
        dfs(root);
        
        return output;
    }
}

//Time Complexity: O(total number of characters)
//Space : O(maxDepth + total # of unique prefix + suffix)
