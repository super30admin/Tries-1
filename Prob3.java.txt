class Solution {
    
    TrieNode root;
    public String replaceWords(List<String> dictionary, String sentence) {
        root = new TrieNode();
        
        for(String word : dictionary)
            insert(word);
        
        String[] words = sentence.split(" ");
        
        StringBuilder result = new StringBuilder();
        for(String word : words){
            String temp = serachAndReturn(word);
            result.append(temp);
            result.append(" ");
        }
        return result.toString().trim();
    }
    
    private void insert(String word){
        TrieNode current = root;
        
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            
            if(current.children[c-'a'] == null)
                current.children[c-'a'] = new TrieNode();
            current = current.children[c-'a'];
        }
        current.isEnd = true;
        
    }
    
    private String serachAndReturn(String word){
        TrieNode current = root;
        StringBuilder pre = new StringBuilder();
        
        for(int i=0;i<word.length();i++){
            char c = word.charAt(i);
            
            if(current.children[c-'a'] == null)
                return word;
            pre.append(c);
            current = current.children[c-'a'];
            if(current.isEnd)
                return pre.toString(); 
        }
        
            return word;
    }
}

class TrieNode {
    boolean isEnd;
    TrieNode[] children;
    
    
    public TrieNode(){
        children = new TrieNode[26];
    }
}