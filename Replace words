// Time Complexity : O(n*k), n is the length of sentence and k is average length of the word
// Space Complexity : O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

// Approach
//1) Traverse through characters of each word in sentence,for any character if isWord is true then send the string from start to till that character
//2) else return the word
class Solution {
    class TrieNode {
        char c;
        HashMap<Character,TrieNode> map;
        boolean isWord;
        TrieNode(char c){
            this.c = c;
            map = new HashMap<>();
            isWord = false;
        }
    }
    public String replaceWords(List<String> dict, String sentence) {
        TrieNode root = new TrieNode('-');
        for(String word:dict){
            insert(root,word);
        }
        StringBuilder sb = new StringBuilder();
        String[] words = sentence.split(" ");
        for(String word:words){
            sb.append(getRoot(root,word));
            sb.append(" ");
        }
        int length = sb.length();
        sb.setLength(length-1);
        return new String(sb);
    }
    public void insert(TrieNode node,String word) {
         TrieNode temp = node;
         for(int i=0;i<word.length();i++){
             if(temp.map.containsKey(word.charAt(i))){
                 temp = temp.map.get(word.charAt(i));
             }else{
                 temp.map.put(word.charAt(i),new TrieNode(word.charAt(i)));
                 temp = temp.map.get(word.charAt(i));
             }
         }
         temp.isWord = true;
    }
    public String getRoot(TrieNode root,String word){
         TrieNode temp = root; StringBuilder sb = new StringBuilder();
         for(int i=0;i<word.length();i++){
             if(temp.map.containsKey(word.charAt(i))){
                 temp = temp.map.get(word.charAt(i));
                 sb.append(word.charAt(i));
                 if(temp.isWord){
                     return new String(sb);
                 }
             }else{
                 break;
             }
         }
         return word;
     }
}