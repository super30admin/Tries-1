//TimeComplexity      O(nk+mk)
//Spacecomplexity     O(mk)

class Solution {

    class TrieNode {
            boolean end;
            TrieNode[] children;

            public TrieNode(){
                children = new TrieNode[26];
            }
        }

        TrieNode root;
        public void insert(String word){
            TrieNode curr = root;
            for(int i = 0; i < word.length(); i++){
                char ch = word.charAt(i);
                if(curr.children[ch - 'a'] == null){
                    curr.children[ch - 'a'] = new TrieNode();

                }
                curr = curr.children[ch - 'a'];
            }
            curr.end = true;
        }

    public String replaceWords(List<String> dictionary, String sentence) {
        
        root = new TrieNode();

        for(String word : dictionary){
            insert(word);
        }
        

        
        StringBuilder result = new StringBuilder();

        String[] str = sentence.split(" ");

        for(int i = 0; i < str.length; i++){
            String strWord = str[i];
            StringBuilder sb = new StringBuilder();
            TrieNode curr = root;
            for(int j = 0; j < strWord.length(); j++){

                char ch = strWord.charAt(j);
                if(curr.children[ch - 'a'] == null || curr.end){
                    break;
                }

                    sb.append(ch);
                    curr = curr.children[ch - 'a'];
            }

            if(curr.end){
                    result.append(sb);
            }else{
                result.append(strWord);
            }
            result.append(" ");
            
        }

       return result.toString().trim();
    }
}
