// every trieNode has 1. 26 trieNodes associated with it and 2. a flag associated with it : to check if that        trieNode is end of any word
// Time complexity: length of the word
// space complexity: 26*length of the word

class TrieNode {
    // two key properties of trieNode
    TrieNode[] children = new TrieNode[26];
    boolean isEndWord;
    
    TrieNode(){
    // initailise the trieNode: means initilaising its properties
      for(TrieNode child : children){
         child = null;
          isEndWord = false;
      }
    }
}
class Trie {
    TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
 
    public void insert(String word) {
        TrieNode pCrawl = root;
        int len = word.length();
        for(int i =0; i< len; i++) {
            int index = word.charAt(i) - 'a';
            if(pCrawl.children[index] == null)
                pCrawl.children[index] = new TrieNode();
            pCrawl = pCrawl.children[index];
        }
        pCrawl.isEndWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode pCrawl = root;
        int len = word.length();
        for(int i = 0; i < len; i++){
            int index = word.charAt(i) - 'a';
            if(pCrawl.children[index] == null) return false;
            pCrawl = pCrawl.children[index];
        }
        return pCrawl.isEndWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode pCrawl = root;
        int len = prefix.length();
        for(int i = 0; i < len; i++){
            int index = prefix.charAt(i) - 'a';
            if(pCrawl.children[index] == null) return false;
            pCrawl = pCrawl.children[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
