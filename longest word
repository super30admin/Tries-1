// Time Complexity :
// Space Complexity : 
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    class TrieNode{
        String word;
        TrieNode[] children;
        public TrieNode(){
            children = new TrieNode[26];
        }
    }
    TrieNode root;
    void insert(String word)
    {
        TrieNode curr = root;
        for(int i=0; i<word.length(); i++)
        {
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null )
                curr.children[c-'a'] = new TrieNode();
            
            curr = curr.children[c-'a'];
        }
        curr.word = word;
    }
    
    public String longestWord(String[] words) {
       
        if(words == null || words.length == 0)
            return "";
        
        root = new TrieNode();
        
        for(String word: words)
            insert(word);
        
        Queue<TrieNode> bfs = new LinkedList<>();
        bfs.add(root);
        TrieNode curr = root;
        while(!bfs.isEmpty())
        {
              curr = bfs.poll();
               for(int i=25; i>=0; i--)
               {
                   if(curr.children[i] != null && curr.children[i].word != null)
                       bfs.add(curr.children[i] );
               }
        }
        return curr.word;
    }
}
