class Trie {
    class Node 
    {
        char c;
        Map<Character, Node> map;
        boolean end; 

        Node(char c)
        {
            this.c = c;
            map = new HashMap<>();
        }
    }

    Node head;

    public Trie() 
    {
        head = new Node('/');
    }
    
    public void insert(String word) 
    {
        Node temp = head;
        for(int i = 0; i < word.length(); i++)
        {
            char c = word.charAt(i);
            if(!temp.map.containsKey(c))
            {
                temp.map.put(c, new Node(c));
            }
            temp = temp.map.get(c);
        }
        temp.end = true;
        return;
    }
    
    public boolean search(String word) 
    {
        Node temp = head;
        for(int i = 0; i < word.length(); i++)
        {
            char c = word.charAt(i);
            if(!temp.map.containsKey(c)) return false;
            temp = temp.map.get(c);
        }
        if(temp.end)return true;
        return false;
    }
    
    public boolean startsWith(String prefix) 
    {
        Node temp = head;
        for(int i = 0; i < prefix.length(); i++)
        {
            char c = prefix.charAt(i);
            if(!temp.map.containsKey(c)) return false;
            temp = temp.map.get(c);
        }
        return true;   
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
