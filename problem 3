class Solution {
    public String longestWord(String[] words) {
        Trie trie  = new Trie();
        int index = 0;
        for(String word : words)
            trie.insert(word, index++);
        
        return trie.dfs(words);
    }
};
    
    class TrieNode 
    {
        char value;
        int index;       //to store length
        int end;
        Map<Character , TrieNode> children = new HashMap<>();
        
        public TrieNode(char c)
        {
            this.value = c;
        }
            
    }
    
    class Trie
    {
        TrieNode root;
        public Trie()
        {
            root = new TrieNode('0');
        }
        
        public void insert(String word , int index)
        {
            TrieNode node = root;
            for(char c : word.toCharArray())
            {
                node.children.putIfAbsent(c , new Node(c));
                node = node.children.get(c);
                    
            }
            node.end = index;
        }
        
        public String dfs(String[] words)
        {
            String ans = "";
            Stack<TrieNode> stack = new Stack<>();
            stack.push(root);
            while(!stakc.isEmpty()){
                
                TrieNode node = stack.pop();
                if(node.end > 0 || node == root)
                {   
                    if(node!=root)
                    {
                        
                    
                    String word = words[node.end];
                    if(word.length() > ans.length() || word.length() == ans.length() && word.compareTo(ans) < 0)
                        ans = word;
                }
                }
                for(TrieNode neighbour : TrieNode.children.values())
                    stack.push(neighbour);
            }
            
            
        }
        return ans;
    }
}
