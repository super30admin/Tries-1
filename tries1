#Implement Trie (Prefix Tree)
class Node:
    def __init__(self):
        self.end=False
        self.arr=[None]*26
class Trie:

    def __init__(self):
        self.root=Node()
        

    def insert(self, word: str) -> None:
        x=self.root
        for w in word:
            if x.arr[ord(w)-ord('a')] is None:
                x.arr[ord(w)-ord('a')]=Node()
            x=x.arr[ord(w)-ord('a')]
        x.end=True    
        

    def search(self, word: str) -> bool:
        x=self.root
        for w in word:
            if x.arr[ord(w)-ord('a')] is None:
                return False
            x=x.arr[ord(w)-ord('a')]
        return x.end==True    
        

    def startsWith(self, word: str) -> bool:
        x=self.root
        for w in word:
            if x.arr[ord(w)-ord('a')] is None:
                return False
            x=x.arr[ord(w)-ord('a')]
        return True
        
        
 #Longest Word in Dictionary
 #tc: O(n*m)
#sc: O(n*m)
class TrieNode:
    def __init__(self):
        self.children = defaultdict(TrieNode)
        self.word = None
    def addWord(self, word):
        cur = self
        for c in word:
            cur = cur.children[c]
        cur.word = word

class Solution:
    def longestWord(self, words: List[str]) -> str:
        trieRoot = TrieNode()
        for word in words:
            trieRoot.addWord(word)
            
        ans = ""
        bfs = deque([trieRoot])
        while bfs:
            cur = bfs.popleft()
            for child in cur.children.values():
                if child.word != None:
                    if len(child.word) > len(ans) or len(child.word) == len(ans) and child.word < ans:
                        ans = child.word
                    bfs.append(child)
        return ans
        
        
#Replace Words
#tc: O(mn)
#sc: O(mn)
class TrieNode:
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isWord = False
        
class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        node = self.root
        for w in word:
            node = node.children[w]
        node.isWord = True
    
    def search(self, word):
        node = self.root
        osf = ''
        for c in word:
            if c not in node.children: break
            node = node.children[c]
            osf += c
            if node.isWord: return osf
        return word

class Solution:
    def replaceWords(self, dict: List[str], sentence: str) -> str:
        trie = Trie()
        for words in dict:
            trie.insert(words)
        res = ''
        for sent in sentence.split():
            if res:
                res += ' '
            res += trie.search(sent)
        return res
        
